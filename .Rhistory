return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "red")
abline(v = ValChange, col= "blue")
a <- 5
b <- 0
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 3
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "red")
abline(v = ValChange, col= "blue")
a <- 5
b <- 0
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 3
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "red")
abline(v = ValChange, col= "blue")
a <- 5
b <- 0
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 3
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "red")
abline(v = ValChange, col= "blue")
a <- 5
b <- 0
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 3
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 5
b <- 0
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 5
b <- 2
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1,type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
min(2,3,1)
min(c(Line1,BlueValue))
a <- 5
b <- 1
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 1000)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 5
b <- 1
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 5
b <- 1
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
plot(Z1,Line1, type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 5
b <- 0.1
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
plot(Z1,Line1, type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 2
b <- 0.1
c <- 1
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
plot(Z1,Line1, type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 2
b <- 1
c <- 3
x <- 2
y <- 5
z <- 2
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
plot(Z1,Line1, type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 2
b <- 1
c <- 3
x <- 2
y <- 5
z <- 1
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 2
b <- 1
c <- 3
x <- 2
y <- 5
z <- 4
ep1 <- 1
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 2
b <- 1
c <- 3
x <- 2
y <- 5
z <- 4
ep1 <- 3
ep2 <- 1
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 2
b <- 1
c <- 3
x <- 2
y <- 5
z <- 4
ep1 <- 3
ep2 <- 3
ValChange <- sqrt((b*b+c*c)*x*x/(a*a) - y*y)
if((c*x) <= (sqrt(a*a+b*b)*y)){
print("Case one");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (c+y)^2 + (sqrt(a*a+b*b) + x)^2
} else {
print("Case two");
BlueValue = (ep1 + sqrt(z*z + ep2*ep2))^2 + (sqrt(a*a+b*b + c*c) + sqrt(x*x + y*y))^2
}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y)*a) {print("Starts in case 1")} else {print("Starts in case 2")}
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z*z)*a) {print("Ends in case 1")} else {print("Ends in case 2")}
Curve1 <- function(z1){
if ((sqrt(b*b+c*c)*x) <= sqrt(y*y + z1*z1)*a){
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(b*b + c*c) + sqrt(y*y + z1*z1))^2 + (a+x)^2)
} else {
return((ep1 + sqrt(z*z - z1*z1 + ep2*ep2))^2 + (sqrt(a*a + b*b + c*c) + sqrt(x*x + y*y + z1*z1))^2 )
}
}
Z1 <- seq(0, sqrt(z), length = 100)
Line1 <- sapply(Z1, Curve1)
plot(Z1,Line1, ylim = c(min(c(Line1,BlueValue)),max(c(Line1,BlueValue))),type = "l");
abline(h = BlueValue, col = "blue")
abline(v = ValChange, col= "red")
a <- 4
a3 <- 1
b <- 1
x <- 2
z <- 4
w <- 1
ep1 <- 3
ep2 <- 3
(ep1*ep2 + sqrt(a3*a3 + b*b) - x*sqrt(a*a - a3*a3)) - (ep1*sqrt(ep2*ep2 + z*z) +b*w -x*a)
ep1*ep2 + sqrt(a3*a3 + b*b) - x*sqrt(a*a - a3*a3)
(ep1*sqrt(ep2*ep2 + z*z) +b*w -x*a)
knitr::opts_chunk$set(echo = TRUE)
names(DataPhylum)
setwd("/Users/laniakea/Documents/Central_Files/Gits/R-stamps2024")
DataPhylum <- read.csv("data/phylum_data.txt", sep = "\t", row.names = 1, header = T)
View(DataPhylum)
